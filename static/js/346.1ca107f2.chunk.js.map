{"version":3,"file":"static/js/346.1ca107f2.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.js","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contacts_input\":\"ContactForm_contacts_input__D-q0d\",\"inputs_bar\":\"ContactForm_inputs_bar__MIwDa\",\"contacts_label\":\"ContactForm_contacts_label__SDFUH\",\"contacts_btn\":\"ContactForm_contacts_btn__fUU8D\"};","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.e;\nexport const selectContactsFilter = state => state.filters.filter;\n","import css from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\n\n\nexport default function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n\n    const handleInputChange = (e) => {\n        const {name, value} = e.target;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    };\n    \n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (contacts.some(contact => contact.name === name)) {\n            alert(`${name} is already in contacts.`);\n            return\n        } else {\n            dispatch(addContact({id: nanoid(), name, number}))\n        } \n        reset();\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={css.inputs_bar}>\n                <label className={css.contacts_label}> Ім'я\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={handleInputChange}\n                    className={css.contacts_input}\n                />  \n                </label>\n                <label className={css.contacts_label}> Телефон\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleInputChange}\n                    className={css.contacts_input}\n                    />\n                </label>\n            </div>\n            <button type=\"submit\" className={css.contacts_btn}>Додати контакт</button>\n        </form>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_label\":\"Filter_filter_label__5ITod\",\"filter_input\":\"Filter_filter_input__eu2zm\"};","import css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const onChange = e => {\n        const value = e.target.value.toLowerCase();\n        dispatch(setFilter(value));\n  };\n\n    return (\n        <label className={css.filter_label}> Знайти контакт\n            <input\n                className={css.filter_input}\n                type='text'\n                onChange={onChange} />\n        </label>\n    )\n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"contacts_box\":\"ContactList_contacts_box__b6g-B\",\"del_btn\":\"ContactList_del_btn__P3ISG\",\"contacts_item\":\"ContactList_contacts_item__E-7AL\",\"contacts_text\":\"ContactList_contacts_text__tJizO\"};","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__yoxbg\",\"Modal\":\"Modal_Modal__I1UYJ\"};","import { useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport css from './Modal.module.css'\nimport { useDispatch } from 'react-redux';\nimport { correctContact } from 'redux/contacts/contactsOperations';\n\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose, userName, userNumber, userId }) {\n    const [name, setName] = useState(`${userName}`);\n    const [number, setNumber] = useState(`${userNumber}`);\n    const [id, setId] = useState(`${userId}`);\n    const dispatch = useDispatch();\n\n\n\n    const handleKeydown = e => {\n        if (e.code === 'Escape') {\n            onClose();\n        }\n    }\n\n    const handleBackDropClick = e => {\n        if (e.currentTarget === e.target) {\n            onClose();\n        }\n    };\n\n    const onModalChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;    \n            case 'id':\n                setId(value);\n                break;    \n            default:\n                return;\n        };\n    }\n\n    const handleModalSubmit = (e) => {\n        e.preventDefault();\n        dispatch(correctContact({ id, name, number }));\n        onClose();\n    }\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeydown);\n\n        return () => {\n        window.removeEventListener('keydown', handleKeydown);\n        };\n    });\n\n    return createPortal(\n        <div className={css.Overlay} onClick={handleBackDropClick}>\n            <form className={css.Modal} onSubmit={handleModalSubmit}>\n                <input value={name} name='name' onChange={onModalChange} />\n                <input value={number} name='number' onChange={onModalChange}/>\n                <button type='submit'>Змінити</button>\n            </form>\n        </div>,\n        modalRoot\n    );\n}","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport css from './ContactList.module.css';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const filterRequest = useSelector(state => state.filter.filter).toLowerCase();\n    const [showModal, setShowModal] = useState(false);\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const [id, setId] = useState('');\n\n\n    const onFilterChange = () => {\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filterRequest));\n    };\n\n    const onDeleteContact = (id) => {\n        dispatch(deleteContact(id));\n    };\n\n    const toggleModal = (name, number, id) => {\n        setShowModal(!showModal);\n        setName(name);\n        setNumber(number);\n        setId(id);\n    }\n\n    return (<>\n        <ul className={css.contacts_box}>\n            {onFilterChange().map(({ id, name, number }) => (\n                <li key={id} className={css.contacts_item}>\n                    <span key={id} className={css.contacts_text}>\n                        {name}: {number}\n                    </span>\n                    <button className={css.del_btn} onClick={() => onDeleteContact(id)}>Видалити</button>\n                    <button className={css.del_btn} onClick={() => toggleModal(name, number, id)}>Редагувати</button>\n                </li>\n            ))}\n        </ul>\n        {showModal && <Modal\n            onClose={toggleModal}\n            userName={name}\n            userNumber={number}\n            userId={id}\n        />}\n    </>\n    )\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components//Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/contacts/contactsSelectors';\nimport { useEffect } from 'react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch])\n\n  return (\n    <div>\n      <h1 style={{textAlign: 'center'}}>Телефонна книга</h1>\n      <ContactForm/>\n      <h2 style={{textAlign: 'center'}}>Мої контакти</h2>\n      {contacts.length > 1 && (\n        <Filter />\n      )}\n      {isLoading && !error && (\n        <p>Завантаження...</p>\n      )}\n      {contacts.length > 0 ? ( \n        <ContactList />\n      ) : (\n          <h2>У вас поки що немає жодного контакту</h2>\n      )}\n    </div>\n  );\n}"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","e","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","target","value","onSubmit","preventDefault","some","contact","alert","addContact","id","nanoid","className","css","type","pattern","title","required","onChange","toLowerCase","setFilter","modalRoot","document","querySelector","Modal","onClose","userName","userNumber","userId","setId","handleKeydown","code","onModalChange","useEffect","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","correctContact","filterRequest","filter","showModal","setShowModal","toggleModal","includes","map","deleteContact","onDeleteContact","Contacts","error","fetchContacts","style","textAlign","length"],"sourceRoot":""}